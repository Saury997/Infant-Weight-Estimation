data:
  path: ../data/my_dataset.xlsx
  target_column: 出生体重
  feature_engineering: true
  binning: false
  log_transform: false
  standardize: true
  test_size: 0.2

training:
  k_folds: 5

ml_search:
  algorithms: ["KNN", "RandomForest", "SVR", "XGBoost", "ExtraTrees", "Ridge", "Lasso", "ElasticNet", "KernelRidge", "GBDT"]
  mode: "random"              # "random" or "grid"
  random_iter: 60           # 若 mode=random 必填
  scoring: "neg_root_mean_squared_error"
  search_n_jobs: -1
  refit: true
  return_train_score: false
  save_best_model: true

  knn:
    base_params: { n_jobs: -1 }
    search_space:
      n_neighbors: [3,5,7,9,11]
      weights: ["uniform","distance"]
      metric: ["minkowski"]
      p: [1,2]

  random_forest:
    base_params: { n_jobs: -1, random_state: 42 }
    search_space:
      n_estimators: [200,500,800]
      max_depth: [null, 8, 12, 16, 24]
      min_samples_split: [2,5,10]
      min_samples_leaf: [1,2,4]

  svr:
    base_params: {}
    search_space:
      kernel: ["rbf"]
      C: [0.5, 1.0, 2.0, 5.0]
      epsilon: [0.05, 0.1, 0.2]
      gamma: ["scale","auto"]

  xgboost:
    base_params: { n_jobs: -1, random_state: 42, tree_method: "auto" }
    search_space:
      n_estimators: [400,600,800]
      learning_rate: [0.03, 0.05, 0.1]
      max_depth: [4,6,8]
      subsample: [0.6,0.8,1.0]
      colsample_bytree: [0.6,0.8,1.0]
      reg_lambda: [0.5,1.0,1.5]

  extra_trees:
    base_params: { n_jobs: -1, random_state: 42 }
    search_space:
      n_estimators: [300,500,800]
      max_depth: [null, 12, 16, 24]
      min_samples_split: [2,5,10]
      min_samples_leaf: [1,2,4]

  ridge:
    base_params: { random_state: 42 }
    search_space:
      alpha: [0.1, 1.0, 5.0, 10.0]
      solver: ["auto"]

  lasso:
    base_params: { max_iter: 10000, random_state: 42 }
    search_space:
      alpha: [0.0005, 0.001, 0.005, 0.01]

  elasticnet:
    base_params: { max_iter: 10000, random_state: 42 }
    search_space:
      alpha: [0.0005, 0.001, 0.005, 0.01]
      l1_ratio: [0.2, 0.5, 0.8]

  kernel_ridge:
    base_params: {}
    search_space:
      alpha: [0.1, 1.0, 5.0]
      kernel: ["rbf", "laplacian"]
      gamma: [0.01, 0.1, 1.0]

  gbdt:
    base_params: { random_state: 42 }
    search_space:
      n_estimators: [200, 400, 600]
      learning_rate: [0.03, 0.05, 0.1]
      max_depth: [3, 4, 5]

others:
  random_seed: 42
  save_root: ../experiments